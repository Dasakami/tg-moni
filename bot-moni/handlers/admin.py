from aiogram import Router, types
from aiogram.filters import Command
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup
import database

admin_router = Router()
# —Å–æ–∑–¥–∞—ë–º –ø—É—Å—Ç—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
filter_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [
            InlineKeyboardButton(text="–í—Å–µ", callback_data="filter_all"),
            InlineKeyboardButton(text="–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="filter_unanswered"),
            InlineKeyboardButton(text="–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ", callback_data="filter_done")
        ]
    ]
)

@admin_router.message(Command("start"))
async def admin_start(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    await message.answer(
        "‚úÖ –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å.\n"
        "–ö–æ–º–∞–Ω–¥—ã:\n"
        "/add —Å–ª–æ–≤–æ ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á\n"
        "/show ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è\n"
        "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π\n"
        "/iamadmin ‚Äî —Å—Ç–∞—Ç—å –∞–¥–º–∏–Ω–æ–º\n"
        "/add_admin <id –∏–ª–∏ @username> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "/del_admin <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
        "/admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
    )

@admin_router.message(Command("iamadmin"))
async def iam_admin(message: types.Message):
    if await database.is_admin(message.from_user.id):
        return await message.answer("‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω.")
    if await database.get_admins == 0:
        await database.add_admin(message.from_user.id, message.from_user.username or "–ù–µ—Ç username")
    await message.answer("üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º!")


@admin_router.message(Command("show"))
async def show_messages(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–∏–ª—å—Ç—Ä:", reply_markup=filter_keyboard)

MAX_LEN = 4000  # –ª–∏–º–∏—Ç Telegram

@admin_router.callback_query(lambda c: c.data.startswith("filter_"))
async def filter_messages(callback: types.CallbackQuery):
    filter_type = callback.data.split("_")[1]  # all / unanswered / done

    rows = await database.get_messages(100)

    if filter_type == "unanswered":
        rows = [r for r in rows if r["status"] == "–ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã–µ"]
    elif filter_type == "done":
        rows = [r for r in rows if r["status"] == "–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ"]

    if not rows:
        await callback.message.edit_text("‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–π –Ω–µ—Ç –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞")
        return

    await callback.message.delete()  # —É–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–∞–º–∏

    for r in rows:
        chat_link = f"@{r['chat_username']}" if r['chat_username'] else r['chat_title']
        username_text = f"@{r['username']}" if r['username'] != "–ù–µ—Ç username" else "–ù–µ—Ç username"

        if r['username'] != "–ù–µ—Ç username":
        # –ö–Ω–æ–ø–∫–∞ —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–æ–π –Ω–∞ username
            keyboard = InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="–û—Ç–∫—Ä—ã—Ç—å —á–∞—Ç —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º", url=f"https://t.me/{r['username']}")]
            ]
        )
        else:
            keyboard = None  # –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±–µ–∑ username –∫–Ω–æ–ø–∫–∏ –Ω–µ—Ç

        text = (
        f"{r['message']}\n\n"
        f"–ö–∞–Ω–∞–ª: {chat_link}\n"
        f"Username: {username_text}\n"
        f"ID —Å–æ–æ–±—â–µ–Ω–∏—è: {r['id']}\n"
        f"–°—Ç–∞—Ç—É—Å: {r['status']}"
    )

        await callback.message.answer(text, reply_markup=keyboard)



    await callback.answer()  # —É–±—Ä–∞—Ç—å —á–∞—Å–∏–∫–∏

@admin_router.message(Command("done"))
async def mark_done(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return
    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /done <id —Å–æ–æ–±—â–µ–Ω–∏—è>")
    msg_id = int(parts[1])
    await database.update_message_status(msg_id, "–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ")
    await message.answer(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –û—Ç–≤–µ—á–µ–Ω–Ω–æ–µ")


@admin_router.message(Command("add_admin"))
async def add_new_admin(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_admin <user_id –∏–ª–∏ @username>")
    target = parts[1]
    if target.startswith("@"):
        await database.add_admin(0, target)
        await message.answer(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω (–Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É).")
    else:
        await database.add_admin(int(target), "ID-only")
        await message.answer(f"‚úÖ ID {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.")

@admin_router.message(Command("del_admin"))
async def del_admin(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del_admin <user_id>")
    target_id = int(parts[1])
    await database.remove_admin(target_id)
    await message.answer(f"üóë –ê–¥–º–∏–Ω {target_id} —É–¥–∞–ª—ë–Ω.")

@admin_router.message(Command("admins"))
async def list_admins(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")
    admins = await database.get_admins()
    if not admins:
        return await message.answer("‚ö†Ô∏è –ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
    text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
    for a in admins:
        text += f"ID: {a['user_id']} | {a['username']}\n"
    await message.answer(text)


@admin_router.message(Command("del_message"))
async def delete_message(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

    parts = message.text.split()
    if len(parts) < 2:
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del_message <id>")

    try:
        msg_id = int(parts[1])
    except ValueError:
        return await message.answer("‚ùå ID –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å —á–∏—Å–ª–æ–º!")

    deleted = await database.delete_message(msg_id)
    if deleted:
        await message.answer(f"üóë –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} —É–¥–∞–ª–µ–Ω–æ.")
    else:
        await message.answer(f"‚ùå –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")


@admin_router.message(Command("del_messages"))
async def delete_messages(message: types.Message):
    if not await database.is_admin(message.from_user.id):
        return await message.answer("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

    parts = message.text.split()
    if len(parts) != 4 or parts[2].upper() != "BETWEEN":
        return await message.answer("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del_messages <–æ—Ç> BETWEEN <–¥–æ>")

    try:
        start_id = int(parts[1])
        end_id = int(parts[3])
    except ValueError:
        return await message.answer("‚ùå ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —á–∏—Å–ª–∞–º–∏!")

    deleted = await database.delete_messages_range(start_id, end_id)
    await message.answer(f"üóë –£–¥–∞–ª–µ–Ω–æ {deleted} —Å–æ–æ–±—â–µ–Ω–∏–π (ID {start_id}‚Äì{end_id}).")
