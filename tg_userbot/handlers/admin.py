from telethon import events
import database

def setup(client, pool):
    # –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
    @client.on(events.NewMessage())
    async def track_keywords(event):
        if not event.text:
            return

        sender = await event.get_sender()
        user_id = sender.id if sender else None
        username = sender.username if sender and sender.username else "–ù–µ—Ç username"

        if sender and getattr(sender, "bot", False):
            return

        chat_title = event.chat.title if event.chat and getattr(event.chat, "title", None) else "–õ–∏—á–Ω—ã–π —á–∞—Ç"
        chat_username = event.chat.username if event.chat and getattr(event.chat, "username", None) else None

        keywords = await database.get_keywords(pool)
        text = event.text.lower()
        found = [word for word in keywords if word in text]

        if found:
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –¥—É–±–ª–∏–∫–∞—Ç
            exists = await database.message_exists(pool, event.chat_id, event.id)
            if not exists:
                await database.save_message(
                    pool,
                    user_id=user_id,
                    username=username,
                    chat_title=chat_title,
                    chat_username=chat_username,
                    message=event.text,
                    message_id=event.id,
                    chat_id=event.chat_id
                )

    # ------------------ –ö–æ–º–∞–Ω–¥—ã ------------------

    @client.on(events.NewMessage(pattern='/iamadmin'))
    async def iam_admin(event):
        sender = await event.get_sender()
        sender_id = sender.id
        username = sender.username or "–ù–µ—Ç username"

    # –ï—Å–ª–∏ —É–∂–µ –∞–¥–º–∏–Ω
        if await database.is_admin(pool, sender_id):
            return await event.reply("‚úÖ –í—ã —É–∂–µ –∞–¥–º–∏–Ω.")

    # –ü–æ–ø—ã—Ç–∫–∞ –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–ø–∏—Å—å username-only (bind_admin_id)
        updated = await database.bind_admin_id(pool, sender_id, username)
        if updated:
            return await event.reply("üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º!")

    # –ò–Ω–∞—á–µ —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∞
        await database.add_admin(pool, sender_id, username)
        await event.reply("üéâ –í—ã –Ω–∞–∑–Ω–∞—á–µ–Ω—ã –∞–¥–º–∏–Ω–æ–º!")


    @client.on(events.NewMessage(pattern='/start'))
    async def start(event):
        sender_id = event.sender_id
        if await database.is_admin(pool, sender_id):
            # –∞–¥–º–∏–Ω ‚Üí –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –∞–¥–º–∏–Ω–∞
            text = (
                "üëë –ê–¥–º–∏–Ω-–ø–∞–Ω–µ–ª—å:\n\n"
                "/add <—Å–ª–æ–≤–æ> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∫–ª—é—á\n"
                "/del <—Å–ª–æ–≤–æ> ‚Äî —É–¥–∞–ª–∏—Ç—å –∫–ª—é—á\n"
                "/list ‚Äî —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π\n"
                "/add_admin <id –∏–ª–∏ @username> ‚Äî –¥–æ–±–∞–≤–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/del_admin <id> ‚Äî —É–¥–∞–ª–∏—Ç—å –∞–¥–º–∏–Ω–∞\n"
                "/admins ‚Äî —Å–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤"
            )
        else:
            # –æ–±—ã—á–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
            text = (
                " –£ —Ç–µ–±—è —Å –≥–æ–ª–æ–≤–æ–π –≤—Å–µ –Ω–æ—Ä–º–∞–ª—å–Ω–æ?\n"
                "–ë–æ–ª–≤–∞–Ω, —è –Ω–µ –±–æ—Ç!"
            )

        await event.respond(text)

    @client.on(events.NewMessage(pattern='/add '))
    async def add_key(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return

        parts = event.text.split(maxsplit=1)
        if len(parts) < 2:
            return await event.reply("‚ö†Ô∏è –ù–∞–ø–∏—à–∏—Ç–µ —Å–ª–æ–≤–æ –ø–æ—Å–ª–µ /add")
        await database.add_keyword(pool, parts[1])
        await event.reply(f"‚úÖ –°–ª–æ–≤–æ '{parts[1]}' –¥–æ–±–∞–≤–ª–µ–Ω–æ.")

    @client.on(events.NewMessage(pattern='/del '))
    async def del_key(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return
        parts = event.text.split(maxsplit=1)
        if len(parts) < 2:
            return await event.reply('‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del <—Å–ª–æ–≤–æ>')
        
        word = parts[1]
        deleted =await database.delete_keyword(pool, word)
        if deleted:
            await event.reply(f"üóë –°–ª–æ–≤–æ '{word}' —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await event.reply(f"‚ùå –°–ª–æ–≤–æ '{word}' –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")

    @client.on(events.NewMessage(pattern='/list'))
    async def list_keys(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return

        keys = await database.get_keywords(pool)
        if not keys:
            return await event.reply("‚ö†Ô∏è –ù–µ—Ç –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤.")
        await event.reply("üìå –ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞:\n" + "\n".join(keys))

    @client.on(events.NewMessage(pattern='/done '))
    async def mark_done(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return

        parts = event.text.split()
        if len(parts) < 2:
            return await event.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /done <id —Å–æ–æ–±—â–µ–Ω–∏—è>")
        msg_id = int(parts[1])
        await database.update_message_status(pool, msg_id, "–û—Ç–≤–µ—á–µ–Ω–Ω—ã–µ")
        await event.reply(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ {msg_id} –ø–æ–º–µ—á–µ–Ω–æ –∫–∞–∫ –û—Ç–≤–µ—á–µ–Ω–Ω–æ–µ")

    @client.on(events.NewMessage(pattern='/add_admin '))
    async def add_new_admin(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return await event.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

        parts = event.text.split()
        if len(parts) < 2:
            return await event.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /add_admin <user_id –∏–ª–∏ @username>")
        target = parts[1]
        if target.startswith("@"):
            await database.add_admin(pool, 0, target)
            await event.reply(f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω (–Ω–∞–¥–æ –Ω–∞–ø–∏—Å–∞—Ç—å –±–æ—Ç—É).")
        else:
            await database.add_admin(pool, int(target), "ID-only")
            await event.reply(f"‚úÖ ID {target} –¥–æ–±–∞–≤–ª–µ–Ω –∫–∞–∫ –∞–¥–º–∏–Ω.")

    @client.on(events.NewMessage(pattern='/del_admin '))
    async def del_admin(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return await event.reply("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞!")

        parts = event.text.split()
        if len(parts) < 2:
            return await event.reply("‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–π: /del_admin <user_id>")
        target_id = int(parts[1])
        await database.remove_admin(pool, target_id)
        await event.reply(f"üóë –ê–¥–º–∏–Ω {target_id} —É–¥–∞–ª—ë–Ω.")

    @client.on(events.NewMessage(pattern='/admins'))
    async def list_admins(event):
        sender_id = event.sender_id
        if not await database.is_admin(pool, sender_id):
            return
        admins = await database.get_admins(pool)
        if not admins:
            return await event.reply("‚ö†Ô∏è –ê–¥–º–∏–Ω–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç.")
        text = "üëë –°–ø–∏—Å–æ–∫ –∞–¥–º–∏–Ω–æ–≤:\n\n"
        for a in admins:
            text += f"ID: {a['user_id']} | {a['username']}\n"
        await event.reply(text)
